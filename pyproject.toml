[tool.poetry]
name = "darkseid"
version = "4.0.3"
description = "A library to interact with comic archives"
authors = ["Brian Pepple <bdpepple@gmail.com>"]
license = "GPL-3.0-or-later"
maintainers = ["Brian Pepple <bdpepple@gmail.com>"]
readme = "README.rst"
packages = [{ include = "darkseid" }]
exclude = ["*/**/*~"]
include = [{ path = "tests", format = "sdist" }]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries",
  "Topic :: Utilities",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: POSIX",
  "Operating System :: POSIX :: BSD",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
]
keywords = ["comics", "comic", "metadata", "tagging", "tagger"]

[tool.poetry.dependencies]
python = "^3.10"
Pillow = "^10.0.1"
natsort = "^8.0.0"
rarfile = "^4.0"
pycountry = "^23.12.11"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"
tox = "^4.14.2"

[tool.poetry.group.test.dependencies]
coverage = { extras = ["toml"], version = "^7.0" }
pytest-cov = "^4.1.0"

[tool.poetry.group.lint.dependencies]
codespell = "^2.1.0"
pyright = "^1.1.232"
radon = { version = "^6.0.1", extras = ["toml"] }
ruff = "^0.3.0"
types-python-dateutil = "^2.8.19"
vulture = "^2.3"
lxml = "^5.1.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx-rtd-theme = "^0.5.2"
sphinxcontrib-napoleon = "^0.7"

[build-system]
requires = ["poetry-core>=1.1.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.urls]
"Homepage" = "https://github.com/Metron-Project/darkseid"
"Bug Tracker" = "https://github.com/Metron-Project/darkseid/issues"

[tool.codespell]
skip = './cache,./dist,./test-results,.git,.mypy_cache,.pytest_cache,.venv*,node_modules,package-lock.json,poetry.lock,run.spec'
builtin = 'clear,rare,code'
check-hidden = true
# Remove 'coverd' when this issue is resolved
# https://github.com/codespell-project/codespell/issues/1212
ignore-words-list = 'thead,ro,jupyter,coverd,searched,ws'

[tool.coverage.html]
directory = "test-results/coverage"

[tool.coverage.run]
source = ["darkseid"]
branch = true
concurrency = ["multiprocessing"]
omit = [
  ".git/*",
  ".mypy_cache/*",
  ".pytest_cache/*",
  ".venv*/*",
  "*__pycache__*",
  "dist/*",
  "node_modules/*",
  "test-results/*",
  "typings/*",
]

[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/node_modules",
  ".git",
  ".mypy_cache",
  ".pytest_cache",
  ".venv*",
  "cache",
  "dist",
  "package-lock.json",
  "poetry.lock",
  "test-results",
  "typings",
]
useLibraryCodeForTypes = true
reportMissingImports = true
reportImportCycles = true
pythonVersion = "3.10"
pythonPlatform = "All"

[tool.pytest.ini_options]
addopts = """
    --junit-xml=test-results/pytest/results.xml
    -ra
    --strict-config
    --strict-markers
    --cov
    --cov-append
    --cov-report=html
    --cov-report=term
"""
junit_family = "xunit2"
testpaths = "tests"

[tool.radon]
exclude = "*~,.git/*,.mypy_cache/*,.pytest_cache/*,.venv*,__pycache__/*,cache/*,dist/*,node_modules/*,test-results/*,typings/*"

[tool.ruff]
extend-exclude = ["typings"]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
extend-ignore = [
  "S101",
  "D203",
  "D213",
  # Format ignores
  "W191",
  "E501",
  "E111",
  "E114",
  "E117",
  "D206",
  "D300",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "COM812",
  "COM819",
  "ISC001",
  "ISC002",
]
extend-select = [
  "A",
  "ARG",
  "B",
  "B9",
  "C",
  "C4",
  "C90",
  #  "D",
  "DTZ",
  "E",
  "EM",
  "EXE",
  "F",
  "I",
  "ICN",
  "INP",
  "ISC",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "N",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "T10",
  "T20",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
  # "ANN", "ERA", "COM"
]
external = ["V101"]
task-tags = ["TODO", "FIXME", "XXX", "http", "HACK"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLR2004", "S320"]
"docs/*" = ["A001"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.vulture]
exclude = [
  ".git/",
  ".mypy_cache/",
  ".pytest_cache/",
  "*.venv*",
  "*/__pycache__",
  "dist/",
  "node_modules/",
  "test_results/",
  "typings/",
]
min_confidence = 61
sort_by_size = true
