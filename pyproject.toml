[project]
name = "darkseid"
version = "6.1.0rc2"
description = "A library to interact with comic archives"
authors = [{ name = "Brian Pepple", email = "bpepple@metron.cloud" }]
requires-python = ">=3.10"
readme = "README.md"
license = "GPL-3.0-or-later"
maintainers = [{ name = "Brian Pepple", email = "bpepple@metron.cloud" }]
keywords = ["comic", "cbz", "cbr", "metadata", "comicinfo", "metroninfo"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries",
  "Topic :: Utilities",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: POSIX",
  "Operating System :: POSIX :: BSD",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
]
dependencies = [
  "natsort>=8.0.0,<9",
  "pycountry>=24.6.1,<25",
  "defusedxml>=0.7.1,<0.8",
  "xmlschema>=4",
  "zipremove>=0.5.0",
  "rarfile>=4.2",
]

[project.urls]
Homepage = "https://github.com/Metron-Project/darkseid"
"Bug Tracker" = "https://github.com/Metron-Project/darkseid/issues"

[project.optional-dependencies]
7zip = ["py7zr>=1.0.0"]
pillow = ["pillow>=11.3.0"]

[dependency-groups]
dev = [
  "pre-commit>=4",
  "codespell>=2.1.0,<3",
  "pyright>=1.1.232,<2",
  "radon[toml]>=6.0.1,<7",
  "ruff>=0.11.0",
  "types-python-dateutil>=2.8.19,<3",
  "vulture~=2.3",
  "hatchling>=1.27.0",
]
test = [
  "coverage[toml]~=7.0",
  "pytest-cov>=5.0.0,<6",
  "pytest-mock>=3.14.0,<4",
  "tox>=4.14.2,<5",
  "tox-uv>=1.25.0",
  "lxml>=5.1.0,<6",
]
docs = [
  "mkdocs>=1.6.0,<2",
  "mkdocs-include-markdown-plugin>=6.2.0,<7",
  "mkdocs-material>=9.5.27,<10",
  "mkdocstrings[python]>=0.29.1,<0.30",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
skip-excluded-dirs = true

[tool.hatch.build.targets.wheel]
exclude = ["darkseid/**/README.md"]

[tool.hatch.build.targets.sdist]
include = ["darkseid", "tests"]
exclude = ["*/**/*~"]

[tool.uv]
default-groups = ["dev", "test", "docs"]

[tool.codespell]
skip = './cache,./dist,./test-results,.git,.mypy_cache,.pytest_cache,.venv*,node_modules,package-lock.json,run.spec'
builtin = 'clear,rare,code'
check-hidden = true
# Remove 'coverd' when this issue is resolved
# https://github.com/codespell-project/codespell/issues/1212
ignore-words-list = 'thead,ro,jupyter,coverd,searched,ws'

[tool.coverage.html]
directory = "test-results/coverage"

[tool.coverage.run]
source = ["darkseid"]
branch = true
concurrency = ["multiprocessing"]
omit = [
  ".git/*",
  ".mypy_cache/*",
  ".pytest_cache/*",
  ".venv*/*",
  "*__pycache__*",
  "dist/*",
  "node_modules/*",
  "test-results/*",
  "typings/*",
]

[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/node_modules",
  ".git",
  ".mypy_cache",
  ".pytest_cache",
  ".venv*",
  "cache",
  "dist",
  "package-lock.json",
  "test-results",
  "typings",
]
useLibraryCodeForTypes = true
reportMissingImports = true
reportImportCycles = true
pythonVersion = "3.10"
pythonPlatform = "All"

[tool.pytest.ini_options]
addopts = """
    --junit-xml=test-results/pytest/results.xml
    -ra
    --strict-config
    --strict-markers
    --cov
    --cov-append
    --cov-report=html
    --cov-report=term
"""
junit_family = "xunit2"
testpaths = "tests"

[tool.radon]
exclude = "*~,.git/*,.mypy_cache/*,.pytest_cache/*,.venv*,__pycache__/*,cache/*,dist/*,node_modules/*,test-results/*,typings/*"

[tool.ruff]
extend-exclude = ["node_modules"]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
extend-ignore = [
  "ANN401", # Checks that function arguments are annotated with a more specific type than Any.
  "E501",   # Checks for lines that exceed the specified maximum character length.
  "COM812", # Checks for the absence of trailing commas.
  "D203",   # Checks for docstrings on class definitions that are not preceded by a blank line.
  "D211",   # Checks for docstrings on class definitions that are preceded by a blank line.
  "D213",   # Checks for docstring summary lines that are not positioned on the second physical line of the docstring.
]
extend-select = [
  "A",
  "ARG",
  "B",
  "B9",
  "C",
  "C4",
  "C90",
  "D",
  "DTZ",
  "E",
  "EM",
  "EXE",
  "F",
  "FBT",
  "FLY",
  "FURB",
  "I",
  "ICN",
  "INP",
  "ISC",
  "LOG",
  "PERF",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "N",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "T10",
  "T20",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
  "ANN",
  #  "ERA",
  "COM",
]
external = ["V101"]
task-tags = ["TODO", "FIXME", "XXX", "http", "HACK"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "ANN",
  "D",
  "S101",    # Checks for uses of the assert keyword.
  "PLR2004", # Checks for the use of unnamed numerical constants ("magic") values in comparisons
]
"docs/*" = [
  "A001", # Checks for variable (and function) assignments that use the same names as builtins.
]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.vulture]
exclude = [
  ".git/",
  ".mypy_cache/",
  ".pytest_cache/",
  ".tox/",
  ".venv/",
  "*/__pycache__",
  "dist/",
  "node_modules/",
  "test_results/",
  "tests/",
  "darkseid/archivers/archiver.py",
]
min_confidence = 61
sort_by_size = true

[tool.tox]
env_list = ["3.10", "3.11", "3.12", "3.13"]
min_version = "4.22"

[tool.tox.env_run_base]
commands = [["pytest"]]
dependency_groups = ["test"]
